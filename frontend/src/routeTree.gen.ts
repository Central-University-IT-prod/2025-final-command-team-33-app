/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './app/routes/__root'
import { Route as StudentImport } from './app/routes/student'
import { Route as MentorImport } from './app/routes/mentor'
import { Route as AdminImport } from './app/routes/admin'
import { Route as IndexImport } from './app/routes/index'

// Create/Update Routes

const StudentRoute = StudentImport.update({
  id: '/student',
  path: '/student',
  getParentRoute: () => rootRoute,
} as any)

const MentorRoute = MentorImport.update({
  id: '/mentor',
  path: '/mentor',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/mentor': {
      id: '/mentor'
      path: '/mentor'
      fullPath: '/mentor'
      preLoaderRoute: typeof MentorImport
      parentRoute: typeof rootRoute
    }
    '/student': {
      id: '/student'
      path: '/student'
      fullPath: '/student'
      preLoaderRoute: typeof StudentImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/mentor': typeof MentorRoute
  '/student': typeof StudentRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/mentor': typeof MentorRoute
  '/student': typeof StudentRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/mentor': typeof MentorRoute
  '/student': typeof StudentRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/admin' | '/mentor' | '/student'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/admin' | '/mentor' | '/student'
  id: '__root__' | '/' | '/admin' | '/mentor' | '/student'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRoute
  MentorRoute: typeof MentorRoute
  StudentRoute: typeof StudentRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRoute,
  MentorRoute: MentorRoute,
  StudentRoute: StudentRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/mentor",
        "/student"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx"
    },
    "/mentor": {
      "filePath": "mentor.tsx"
    },
    "/student": {
      "filePath": "student.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
